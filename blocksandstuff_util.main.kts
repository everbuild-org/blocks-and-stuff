#!/usr/bin/env kotlin

@file:Repository("https://mvn.everbuild.org/mirror-snapshots")
@file:DependsOn("net.minestom:minestom:1.21.9-ci-mirror")

import java.io.File
import java.lang.ProcessBuilder
import net.minestom.server.instance.block.Block

val gradleCommand = if (System.getProperty("os.name").lowercase().contains("windows")) {
    "./gradlew.bat"
} else {
    "./gradlew"
}

val process: Process = ProcessBuilder(gradleCommand, ":testserver:run", "--args=gen-elements")
    .inheritIO()
    .start()

val exitCode = process.waitFor()
if (exitCode != 0) {
    throw Exception("Gradle exited with code $exitCode")
}

val ignored = File(".github/list-producer/ignored-blocks.txt").readLines()
val allWithState = Block.values()
    .filter { it.properties().keys.isNotEmpty() }
    .map { it.key().asString() }
    .filter { !ignored.contains(it) }

val supported = File(".github/list-producer/supported-blocks.txt").readLines()
val unsupported = allWithState.filter { !supported.contains(it) }

val totalBlocks = allWithState.size
val unsupportedCount = unsupported.size
val supportedAndIgnored = allWithState.filter { supported.contains(it) || ignored.contains(it) }
val supportedCount = supportedAndIgnored.size
val supportedPercentage = (supportedCount.toDouble() / totalBlocks * 100).toInt()

fun generatePlacementMarkdown(): String {
    return """
# Block Placement Implementation Status

> This file is automatically generated. To update it, execute `kotlin blocksandstuff_util.main.kts`

## Statistics
 - Total blocks with state: $totalBlocks
 - Supported blocks: $supportedCount
 - Unsupported blocks: $unsupportedCount
 - Implementation progress: $supportedPercentage% (${(totalBlocks.toDouble() / 100).toInt()} blocks = 1%)

## Unsupported Blocks
${unsupported.sorted().joinToString("\n") { "- [ ] $it" }}

## Supported Blocks
${supported.sorted().joinToString("\n") { "- [x] $it" }}
    """.trimIndent()
}

File("TODO-placement.md").writeText(generatePlacementMarkdown())

fun generateBehaviourMarkdown(): String {
    val supported = listOf<String>()
    val unsupported = Block.values().filter { !supported.contains(it.key().asString()) }.map { it.key().asString() }
    return """
# Block Behavior Implementation Status

> This file is automatically generated. To update it, execute `kotlin blocksandstuff_util.main.kts`

## Unsupported Blocks
${unsupported.sorted().joinToString("\n") { "- [ ] $it" }}

## Supported Blocks
${supported.sorted().joinToString("\n") { "- [x] $it" }}
    """.trimIndent()
}

File("TODO-behavior.md").writeText(generateBehaviourMarkdown())

fun getVersion(): String {
    val buildGradleContent = File("build.gradle.kts").readText()
    val versionRegex = """version\s*=\s*"([^"]+)"""".toRegex()
    return versionRegex.find(buildGradleContent)?.groupValues?.get(1) ?: "unknown"
}

fun generateBadge(k: String, v: String): String {
    return "![$k](https://img.shields.io/badge/${k.replace(" ", "_")}-${
        v.replace(" ", "_").replace("-", "--")
    }-green?style=for-the-badge)"
}

fun updateReadme() {
    val readmePath = "README.md"
    val content = File(readmePath).readText()
    val startTag = "<!-- TAG_REPLACEMENT -->"
    val endTag = "<!-- /TAG_REPLACEMENT -->"

    val version = getVersion()

    val statsContent =
        "[${generateBadge("Supported Blocks", "$supportedPercentage%25")}](TODO.md) [${
            generateBadge(
                "Latest Version",
                version
            )
        }](https://mvn.everbuild.org/#/public/org/everbuild/blocksandstuff)"

    val updatedContent = content.replace(
        """$startTag\n.*?\n$endTag""".toRegex(RegexOption.DOT_MATCHES_ALL),
        "$startTag\n$statsContent\n$endTag"
    )

    File(readmePath).writeText(updatedContent)
}

updateReadme()
